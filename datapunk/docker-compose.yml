services:
  # Infrastructure services (from base)
  consul:
    extends:
      file: docker-compose.base.yml
      service: consul

  prometheus:
    extends:
      file: docker-compose.base.yml
      service: prometheus

  jaeger:
    extends:
      file: docker-compose.base.yml
      service: jaeger

  # Core services
  lake:
    build:
      context: .
      dockerfile: containers/lake/Dockerfile
    environment:
      - SERVICE_NAME=lake
      - SERVICE_VERSION=0.1.0
      - CONSUL_HOST=consul
    depends_on:
      - consul
      - prometheus
      - jaeger
    networks:
      - mesh-network
    volumes:
      - lake-data:/data
    healthcheck:
      test: ["CMD", "./scripts/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  stream:
    build:
      context: .
      dockerfile: containers/stream/Dockerfile
    environment:
      - SERVICE_NAME=stream
      - SERVICE_VERSION=0.1.0
      - CONSUL_HOST=consul
    depends_on:
      - consul
      - prometheus
      - jaeger
      - lake
    networks:
      - mesh-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nexus:
    build:
      context: .
      dockerfile: containers/nexus/Dockerfile
    environment:
      - SERVICE_NAME=nexus
      - SERVICE_VERSION=0.1.0
      - CONSUL_HOST=consul
    depends_on:
      - consul
      - prometheus
      - jaeger
      - lake
      - stream
    networks:
      - mesh-network
    ports:
      - "8002:8002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ML and Data Processing services
  cortex:
    build:
      context: .
      dockerfile: containers/cortex/Dockerfile
    environment:
      - SERVICE_NAME=cortex
      - SERVICE_VERSION=0.1.0
      - CONSUL_HOST=consul
    depends_on:
      - consul
      - prometheus
      - jaeger
      - lake
    networks:
      - mesh-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  forge:
    build:
      context: .
      dockerfile: containers/forge/Dockerfile
    environment:
      - SERVICE_NAME=forge
      - SERVICE_VERSION=0.1.0
      - CONSUL_HOST=consul
    depends_on:
      - consul
      - prometheus
      - jaeger
      - lake
    networks:
      - mesh-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: containers/frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - nexus
    networks:
      - mesh-network
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:3000/health').then(r => process.exit(r.ok ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  lake-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/lake
      o: bind
  lake-cache:
    driver: local
  stream-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/stream
      o: bind
  stream-cache:
    driver: local
  nexus-cache:
    driver: local
  model-cache:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/models
      o: bind
  vector-cache:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data/vectors
      o: bind

networks:
  mesh-network:
    name: datapunk_mesh
    driver: bridge