@sys-arch.mmd @project_status.md @DatapunkManifesto.txt 
Ensure that all comments enhance the reader's understanding of the code and make it easier for future developers (and for us) to maintain and extend the project. Avoid cluttering the code with unnecessary or redundant comments. Apply your comments directly to the file. Additionally, please include a seperate block for a github commit summary(50 characters or less) and then another copyable text block for a detailed  description of the changes made (3 to 10 bullet points).

Analyze the attached code file and write high-quality comments to improve its clarity and maintainability. Follow these principles when writing the comments, using all availible documentation:
Explain "Why," Not Just "What": Focus on explaining the intent and reasoning behind complex or non-obvious decisions, rather than restating what the code does.
Provide High-Level Summaries: For functions, classes, and modules, include brief summaries that describe their purpose and how they fit into the larger system.
Document Debugging Insights: Add comments that highlight assumptions, limitations, potential edge cases, or areas that may require future debugging or optimization.
Clarify Workarounds or Non-Standard Solutions: If the code includes hacks, workarounds, or unconventional techniques, explain why they are necessary.
Avoid Redundancy: Do not write comments that simply repeat the code. Ensure that comments add value by providing context or explaining decisions.
Tailor to the Audience: Assume the reader has general programming knowledge but may not have full context for the specific problem or approach used.
Reflect Maintainability: Ensure comments align with the current state of the code. If the code includes areas for future updates, indicate them with clear tags like TODO or FIXME.
Define Standards and Domain Knowledge: Where necessary, document any domain-specific concepts, standards, or compliance requirements the code adheres to.
Be Clear and Concise: Use plain, unambiguous language. Avoid technical jargon or inside references unless absolutely necessary.
Use Tags for Notes: Use clear markers such as TODO, FIXME, and NOTE to highlight important information, areas for improvement, or incomplete work.
A special attention should be paid to trying to add relevent todos, especially for all the services in the @containers folder.