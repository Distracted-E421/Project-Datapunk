# PostgreSQL Configuration for Lake Service
# Optimized for multi-modal data storage with AI/ML workloads

# Connection Settings
# Allow connections from all containers within the service mesh
# NOTE: Security is handled at the container/network level
listen_addresses = '*'
max_connections = 200  # Sized for concurrent Stream service connections

# Memory Settings
# Optimized for vector operations and time series data
# TODO: Implement dynamic adjustment based on container resources
shared_buffers = 2GB        # 25% of container memory for shared cache
effective_cache_size = 6GB  # 75% of container memory for OS cache
maintenance_work_mem = 512MB # For index builds and table optimization
work_mem = 16MB            # Per-operation memory allocation

# Write Ahead Log Configuration
# Balanced for data safety and performance
# FIXME: Monitor WAL size during heavy vector operations
wal_buffers = 16MB              # Matches typical vector batch size
min_wal_size = 1GB             # Prevents excessive WAL file cycling
max_wal_size = 4GB             # Caps disk usage during peak loads
checkpoint_completion_target = 0.9  # Spreads checkpoint I/O over time

# Query Planning
# Optimized for SSD storage and vector operations
random_page_cost = 1.1           # Assumes SSD storage
effective_io_concurrency = 200   # High for SSD parallel operations
default_statistics_target = 100  # Balanced for vector and time series data

# Extension Loading
# Core extensions for Lake service functionality
# NOTE: Order matters for dependency resolution
shared_preload_libraries = 'timescaledb,pg_stat_statements,pg_cron,pgvector'

# Extension-specific settings
# Disable telemetry for privacy compliance
timescaledb.telemetry_level=off

# TODO: Add the following optimizations:
# - Parallel query settings for vector operations
# - Autovacuum tuning for large vector tables
# - Memory settings for peak ML workloads
# - Monitoring integration parameters