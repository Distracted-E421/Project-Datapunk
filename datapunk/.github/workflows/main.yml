name: Datapunk CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Manual trigger

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"
  COVERAGE_THRESHOLD: 80

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        component: [shared, lake, forge, nexus, cortex, stream]
        include:
          - component: shared
            path: datapunk/lib/shared
          - component: lake
            path: datapunk/containers/lake
          - component: forge
            path: datapunk/containers/forge
          - component: nexus
            path: datapunk/containers/nexus
          - component: cortex
            path: datapunk/containers/cortex
          - component: stream
            path: datapunk/containers/stream

    services:
      redis:
        image: redis:6
        ports:
          - 6379:6379

      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        with:
          path: ${{ matrix.path }}/.venv
          key: ${{ runner.os }}-poetry-${{ matrix.component }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.component }}-

      - name: Install dependencies
        working-directory: ${{ matrix.path }}
        run: poetry install --with test

      - name: Run Tests
        working-directory: ${{ matrix.path }}
        env:
          DATAPUNK_ENV: test
          REDIS_HOST: localhost
          POSTGRES_HOST: localhost
          RABBITMQ_HOST: localhost
        run: |
          poetry run pytest -v --cov --cov-report=xml --cov-report=html --junitxml=test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.component }}
          path: |
            ${{ matrix.path }}/coverage.xml
            ${{ matrix.path }}/coverage_html/
            ${{ matrix.path }}/test-results.xml
            ${{ matrix.path }}/test-reports/

      - name: Security Scan
        working-directory: ${{ matrix.path }}
        run: |
          poetry run bandit -r ./ -f json -o security-report.json
          poetry run safety check
          poetry run pip-audit

      - name: Type Check & Lint
        working-directory: ${{ matrix.path }}
        run: |
          poetry run mypy .
          poetry run black --check .
          poetry run isort --check-only .
          poetry run pylint .

  build:
    name: Build Packages
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        component: [lake, forge, nexus, cortex, stream]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build Package
        working-directory: datapunk/containers/${{ matrix.component }}
        run: |
          python -m pip install build
          python -m build

      - name: Create Portable Archive
        run: |
          python datapunk/scripts/create_portable_package.py \
            --component ${{ matrix.component }} \
            --version ${{ github.sha }} \
            --os ${{ matrix.os }}

      - name: Upload Package Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.component }}-${{ matrix.os }}-${{ github.sha }}
          path: |
            dist/
            portable_packages/

  release:
    name: Create Release
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
          tag_name: v${{ github.run_number }}

      - name: Generate Installation Guide
        run: |
          python scripts/generate_install_guide.py \
            --version v${{ github.run_number }} \
            --artifacts-dir artifacts

      - name: Upload Installation Guide
        uses: actions/upload-artifact@v3
        with:
          name: installation-guide
          path: install_guide.md

  notify:
    name: Notifications
    needs: [test, build, release]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Check workflow status
        uses: technote-space/workflow-conclusion-action@v3

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            Workflow: ${{ github.workflow }}
            Status: ${{ env.WORKFLOW_CONCLUSION }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
