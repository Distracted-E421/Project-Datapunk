name: Local Testing

on:
  workflow_dispatch:
    inputs:
      os:
        description: "Target OS"
        required: true
        default: "windows"
        type: choice
        options:
          - windows
          - linux
      test_type:
        description: "Test type"
        required: true
        type: choice
        options:
          - unit
          - integration
          - performance
          - all
      component:
        description: "Component to test"
        required: true
        type: choice
        options:
          - all
          - lake
          - forge
          - nexus
          - cortex
          - stream

jobs:
  prepare:
    runs-on: ${{ inputs.os == 'windows' && 'windows-latest' || 'ubuntu-latest' }}
    outputs:
      components: ${{ steps.set-components.outputs.list }}
    steps:
      - id: set-components
        run: |
          if [ "${{ inputs.component }}" = "all" ]; then
            echo "list=['lake', 'forge', 'nexus', 'cortex', 'stream']" >> $GITHUB_OUTPUT
          else
            echo "list=['${{ inputs.component }}']" >> $GITHUB_OUTPUT
          fi
        shell: bash

  unit_tests:
    needs: prepare
    if: inputs.test_type == 'unit' || inputs.test_type == 'all'
    runs-on: ${{ inputs.os == 'windows' && 'windows-latest' || 'ubuntu-latest' }}
    strategy:
      matrix:
        component: ${{ fromJson(needs.prepare.outputs.components) }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        working-directory: datapunk/containers/${{ matrix.component }}
        run: |
          python -m pip install poetry
          poetry install --with test

      - name: Run unit tests
        working-directory: datapunk/containers/${{ matrix.component }}
        run: |
          poetry run pytest tests/unit -v --junitxml=unit-test-results.xml

      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results-${{ matrix.component }}
          path: datapunk/containers/${{ matrix.component }}/unit-test-results.xml

  integration_tests:
    needs: prepare
    if: inputs.test_type == 'integration' || inputs.test_type == 'all'
    runs-on: ${{ inputs.os == 'windows' && 'windows-latest' || 'ubuntu-latest' }}
    strategy:
      matrix:
        component: ${{ fromJson(needs.prepare.outputs.components) }}
    services:
      redis:
        image: redis:6
        ports:
          - 6379:6379
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        working-directory: datapunk/containers/${{ matrix.component }}
        run: |
          python -m pip install poetry
          poetry install --with test

      - name: Run integration tests
        working-directory: datapunk/containers/${{ matrix.component }}
        run: |
          poetry run pytest tests/integration -v --junitxml=integration-test-results.xml

      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results-${{ matrix.component }}
          path: datapunk/containers/${{ matrix.component }}/integration-test-results.xml

  local_performance:
    needs: prepare
    if: inputs.test_type == 'performance' || inputs.test_type == 'all'
    runs-on: ${{ inputs.os == 'windows' && 'windows-latest' || 'ubuntu-latest' }}
    strategy:
      matrix:
        component: ${{ fromJson(needs.prepare.outputs.components) }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install k6
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            curl -L https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz | tar xz
            sudo mv k6-v0.45.0-linux-amd64/k6 /usr/local/bin
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install k6
          fi
        shell: bash

      - name: Run local performance tests
        working-directory: datapunk/containers/${{ matrix.component }}
        run: |
          poetry run python scripts/run_local_performance.py \
            --duration 30s \
            --users 5 \
            --output-dir perf-results

      - name: Generate local performance report
        run: |
          python scripts/generate_local_perf_report.py \
            --component ${{ matrix.component }} \
            --results-dir perf-results \
            --output-dir reports

      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results-${{ matrix.component }}
          path: reports/

  generate_report:
    needs: [unit_tests, integration_tests, local_performance]
    if: always()
    runs-on: ${{ inputs.os == 'windows' && 'windows-latest' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Generate summary report
        run: |
          python scripts/generate_test_summary.py \
            --artifacts-dir artifacts \
            --output-dir summary

      - name: Upload summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: summary/

      - name: Generate recommendations
        run: |
          python scripts/generate_recommendations.py \
            --artifacts-dir artifacts \
            --output-dir recommendations

      - name: Upload recommendations
        uses: actions/upload-artifact@v3
        with:
          name: test-recommendations
          path: recommendations/
