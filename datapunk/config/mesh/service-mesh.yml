# Service Mesh Configuration
# See: sys-arch.mmd ServiceMesh->Communication
mesh:
  name: datapunk-mesh
  version: "1.0"
  
  # Service Discovery Configuration
  # Integrates with Consul for service registration and health monitoring
  # TODO: Implement automated service registration
  discovery:
    method: consul  # Required for service mesh topology
    consul:
      host: ${CONSUL_HOST:-consul}  # Default for local development
      port: ${CONSUL_PORT:-8500}    # Standard Consul API port
      datacenter: ${CONSUL_DC:-dc1} # FIXME: Make configurable per environment
      register_interval: 10s        # Balances responsiveness vs. overhead
      deregister_critical_service_after: 30s  # Prevents ghost services

  # Circuit Breaking Configuration
  # Prevents cascade failures across services
  # NOTE: Thresholds based on load testing results
  circuit_breakers:
    default:  # Global defaults for all services
      max_connections: 1024      # TCP connection limit
      max_pending_requests: 1024 # Queue size for pending requests
      max_requests: 1024        # Concurrent request limit
      max_retries: 3           # Maximum retry attempts
    custom:  # Service-specific overrides
      lake_service:  # Data lake requires higher limits
        max_connections: 2048
        max_pending_requests: 2048
      stream_service:  # Stream processing needs request headroom
        max_requests: 2048

  # Load Balancing Configuration
  # Uses least_request for optimal resource utilization
  # TODO: Implement canary deployment support
  load_balancing:
    policy: least_request  # Favors less busy endpoints
    health_checks:
      timeout: 5s         # Maximum health check duration
      interval: 10s       # Check frequency
      unhealthy_threshold: 3  # Failures before marking unhealthy
      healthy_threshold: 2    # Successes before marking healthy

  # Service Retry Policies
  # Implements exponential backoff for resilience
  # See: project_status.md ServiceMesh->Integration
  policies:
    retry:
      attempts: 3  # Maximum retry attempts
      timeout: 2s  # Per-attempt timeout
      backoff:     # Exponential backoff settings
        base_interval: 100ms
        max_interval: 3s
        multiplier: 2
      conditions:  # Retry triggers
        - 5xx            # Server errors
        - connect-failure # Network issues
        - refused-stream # Stream failures
    
    timeout:  # Service timeouts
      idle: 5m    # Maximum idle connection time
      connect: 5s # Connection establishment timeout

  # Observability
  telemetry:
    tracing:
      enabled: true
      provider: jaeger
      sampling_rate: 0.1
      tags:
        - key: "service.version"
          value: "${SERVICE_VERSION}"
        - key: "environment"
          value: "${ENV:-development}"
    metrics:
      enabled: true
      provider: prometheus
      scrape_interval: 15s
      path: "/metrics"

  # Security
  security:
    mtls:
      enabled: true
      cert_rotation: 24h
    authorization:
      enabled: true
      policies:
        - name: "service-to-service"
          principals: ["spiffe://datapunk/*"]
          action: ALLOW